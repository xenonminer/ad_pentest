import subprocess
import readline
from colors import Colors
from tools import (
    crackmapexec,
    impacket,
    responder,
    kerbrute,
    hashcat,
    evil_winrm
)
from data import get_item, save_item
import cmd
import re
import os

def run_command(command, output_file=None):
    history_file = os.path.expanduser('~/.ad_pentest_history')

    history = []
    if os.path.exists(history_file):
        with open(history_file, 'r') as f:
            history = [line.strip() for line in f]

    placeholders = re.findall(r"<(.*?)>", command)
    replacements = {}

    for placeholder in placeholders:
        if input(f"Do you want to use an existing value for {placeholder}? (Y/y) ").lower() == "y":
            selection = get_item(placeholder)
            if selection is None:
                replacements[placeholder] = input(f"Enter {placeholder.replace('_', ' ')}: ")
                save_item(placeholder, replacements[placeholder])
            else:
                replacements[placeholder] = selection
        else:
            replacements[placeholder] = input(f"Enter {placeholder.replace('_', ' ')}: ")
            save_item(placeholder, replacements[placeholder])

    for placeholder, replacement in replacements.items():
        command = command.replace(f"<{placeholder}>", replacement)

    print("\n-----------Running command-----------\n")
    # Saves output to file if parameter is specified
    if output_file:
        with open(output_file, "w") as f:
            process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)
            for line in iter(process.stdout.readline, ''):
                print(line, end='')
                f.write(line)
    else:
        subprocess.run(command, shell=True)
    print("\n")

    history.append(command)

    with open(history_file, 'w') as f:
        for cmd in history:
            if cmd != "":
                f.write(f"{cmd}\n")

    if output_file:
        print("-----------Saving output-----------\n")

def tab_autocomplete(text, state):
    history_file = os.path.expanduser('~/.ad_pentest_history')

    with open(history_file, 'r') as f:
        COMMANDS = [line.strip() for line in f]

    if state == 0:
        if text:
            tab_autocomplete.matches = [i for i in COMMANDS if i.startswith(text)]
        else:
            tab_autocomplete.matches = COMMANDS

    try:
        return tab_autocomplete.matches[state]
    except IndexError:
        return None

# Displays all options that contain the search term in the description
def module_search(tools):

    search = input(f"\n{Colors.CYAN}Enter search term (q to quit): {Colors.RESET}").split(" ")
    if search[0] == "q":
        exit()

    print("\n-----------Search results-----------\n")

    # Search through all tools and options and print then be able to select one
    options = []
    for tool in tools:
        for option in tool.options:
            if all(term.lower() in option['description'].lower() for term in search):
                options.append(option)
                print(f"{Colors.GREEN}{len(options)}) {tool.name}: {option['description']}{Colors.RESET}")

    if not options:
        return "0 results found"

    option = input("\nEnter the number of the option (q to quit): ")
    if option == "q":
        exit()

    try:
        option = int(option)
        selected_option = options[option - 1]
        print(f"\n{selected_option['name']}\nDescription: {selected_option['description']}\nUsage: {selected_option['command']}\nExample: {selected_option['example']}\n")
        return selected_option['command']
    except (ValueError, IndexError):
        return "Invalid option"

# Displays a list of ad tools in numerical order
def ad_help_list():
    tools = [crackmapexec, impacket, responder, kerbrute, hashcat, evil_winrm]
    
    print(f"{Colors.GREEN}\n1) Tools{Colors.RESET}")
    print(f"{Colors.GREEN}2) Search through all tools and options{Colors.RESET}") # for searching functionality
    print(f"{Colors.GREEN}3) Go through previous commands with arrow keys and tab completion{Colors.RESET}")
    print(f"{Colors.GREEN}4) AD Pentest Suggester{Colors.RESET}")
    print(f"{Colors.GREEN}5) Help{Colors.RESET}")
    print(f"{Colors.GREEN}6) Quit{Colors.RESET}")

    ad_option = input("\nEnter option (q to quit): ")

    if ad_option == "q":
        exit()

    try:
        if int(ad_option) == 1:
            print(f"{Colors.GREEN}\nSelect a tool:{Colors.RESET}")
            for i, tool in enumerate(tools, start=1):
                print(f"{Colors.GREEN}{i}) {tool.name}{Colors.RESET}")
            tool_choice = input("\nEnter the number of the tool (q to quit): ")

            if tool_choice == "q":
                exit()

            try:
                tool_choice = int(tool_choice)
                selected_tool = tools[tool_choice - 1]

                selected_tool.display_options()
                option = input(f"\n{Colors.CYAN}Enter the number of the option (q to quit): {Colors.RESET}")

                if option == "q":
                    exit()

                return selected_tool.handle_options(option)
            except (ValueError, IndexError):
                return "Invalid option"
        elif int(ad_option) == 2:
            command = module_search(tools)

            if command != "Invalid option" and command != "0 results found" and command is not None:
                inp = input("Do you want to run the command selected? (Y/y) ")
                if inp == "y" or inp == "Y" or inp == "Yes" or inp == "yes":
                    # Add user specified options to command
                    inp = input("Do you want to add any options to the command? (Y/y) ")
                    if inp == "y" or inp == "Y" or inp == "Yes" or inp == "yes":
                        command += " " + input("Enter options (Ex: -u http://127.0.0.1 -w rockyou.txt): ")
                    # output to file
                    inp = input("Do you want to save the output to a file? (Y/y) ")
                    if inp == "y" or inp == "Y" or inp == "Yes" or inp == "yes":
                        output_file = input("Enter the name of the output file: ")
                        run_command(command, output_file=output_file)
                    else:
                        run_command(command)
            else:
                # If the command is invalid or there are no results, return the appropriate error
                return command
        elif int(ad_option) == 3:
            readline.parse_and_bind('tab: complete')
            readline.parse_and_bind('set editing-mode vi')
            readline.set_completer(tab_autocomplete)
            readline.set_completer_delims('')
            readline.read_history_file(os.path.expanduser('~/.ad_pentest_history'))
            while True:
                try:
                    command = input(f"{Colors.CYAN}ad_pentest> {Colors.RESET}")
                    if command == "exit" or command == "quit":
                        readline.parse_and_bind('tab:')
                        readline.set_completer(None)
                        readline.clear_history()
                        return ad_help_list()
                    else:
                        run_command(command)
                except KeyboardInterrupt:
                    exit()
                except Exception as e:
                    print(f"{Colors.RED}Error: {e}{Colors.RESET}")
        elif int(ad_option) == 4:
            run_command("python3 elbat/ad_pentest/ad_pentest_suggester.py")
            return ad_help_list()
        elif int(ad_option) == 5:
            print(f"""{Colors.BLUE}
                  \n1) Tools
                        Displays all the tools and options available
                        Select a tool and then select an option to see the description, usage, and example
                        You can also run the command directly from this menu
                  \n2) Search through all tools and options
                        Type in a search term and it will display all tools and options that contain the search term in the title and description
                        Ex: user
                  \n3) Go through previous commands with arrow keys and tab completion
                        Have your own interface/shell for going through previous commands with a tab completion feature
                        Use the arrow keys to go through previous commands
                        Type in exit or quit to exit the interface/shell and go back to the main menu
                  \n4) AD Pentest Suggester
                        Runs the AD Pentest Suggester tool which will suggest tools and commands to run based on what stage of the pentest you are in
                  \n5) Help
                        Prints this menu
                  \n6) Quit
                        Exits the program
                  {Colors.RESET}""")
            return ad_help_list()
        elif int(ad_option) == 6:
            exit()
    except (ValueError, IndexError):
        return "Invalid option"

if __name__ == "__main__":

    print(f"""\n{Colors.MAGENTA}
    _    ____    _   _      _
   / \  |  _ \  | | | | ___| |_ __   ___ _ __
  / _ \ | | | | | |_| |/ _ \ | '_ \ / _ \ '__|
 / ___ \| |_| | |  _  |  __/ | |_) |  __/ |
/_/   \_\____/  |_| |_|\___|_| .__/ \___|_|
                             |_|{Colors.RESET}
    """)

    subprocess.run("chmod +x elbat/ad_pentest/start.sh", shell=True)
    subprocess.run("elbat/ad_pentest/start.sh", shell=True)

    while True:
        command = ad_help_list()

        if command != "Invalid option" and command != "0 results found" and command is not None:
            # run command
            inp = input("Do you want to run the command selected? (Y/y) ")
            if inp == "y" or inp == "Y" or inp == "Yes" or inp == "yes":
                # Add user specified options to command
                inp = input("Do you want to add any options to the command? (Y/y) ")
                if inp == "y" or inp == "Y" or inp == "Yes" or inp == "yes":
                    command += " " + input("Enter options (Ex: -u http://127.0.0.1 -w rockyou.txt): ")
                # output to file
                inp = input("Do you want to save the output to a file? (Y/y) ")
                if inp == "y" or inp == "Y" or inp == "Yes" or inp == "yes":
                    output_file = input("Enter the name of the output file: ")
                    run_command(command, output_file=output_file)
                else:
                    run_command(command)
        else:
            if command == None:
                exit()
            # If the command is invalid or there are no results, return the appropriate error
            print(f"{Colors.RED}{command} \n{Colors.RESET}")
